// <auto-generated />
using System;
using CoreService.Models.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CoreService.Migrations
{
    [DbContext(typeof(CoreDbContext))]
    [Migration("20250404055436_AddDefaultData")]
    partial class AddDefaultData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CoreService.Models.Database.Entity.AccountEntity", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("uuid");

                b.Property<double>("Balance")
                    .HasColumnType("double precision");

                b.Property<DateTime>("CreatedAt")
                    .HasColumnType("timestamp with time zone");

                b.Property<int>("Currency")
                    .HasColumnType("integer");

                b.Property<string>("Name")
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnType("character varying(100)");

                b.Property<int>("Status")
                    .HasColumnType("integer");

                b.Property<int>("Type")
                    .HasColumnType("integer");

                b.Property<Guid>("UserId")
                    .HasColumnType("uuid");

                b.HasKey("Id");

                b.ToTable("Accounts");

                b.HasData(
                    new
                    {
                        Id = new Guid("c80c02e2-af14-4ea7-b021-49372536d995"),
                        Balance = 100000.0,
                        CreatedAt = new DateTime(2025, 4, 4, 5, 54, 36, 566, DateTimeKind.Utc).AddTicks(4764),
                        Currency = 0,
                        Name = "MASTER_ACCOUNT",
                        Status = 0,
                        Type = 0,
                        UserId = new Guid("00000000-0000-0000-0000-000000000000")
                    });
            });

            modelBuilder.Entity("CoreService.Models.Database.Entity.TransactionEntity", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("uuid");

                b.Property<Guid>("AccountId")
                    .HasColumnType("uuid");

                b.Property<double>("Amount")
                    .HasColumnType("double precision");

                b.Property<int>("Currency")
                    .HasColumnType("integer");

                b.Property<DateTime>("PerformedAt")
                    .HasColumnType("timestamp with time zone");

                b.Property<int>("Type")
                    .HasColumnType("integer");

                b.HasKey("Id");

                b.HasIndex("AccountId");

                b.ToTable("Transactions");
            });

            modelBuilder.Entity("CoreService.Models.Database.Entity.TransactionEntity", b =>
            {
                b.HasOne("CoreService.Models.Database.Entity.AccountEntity", "Account")
                    .WithMany()
                    .HasForeignKey("AccountId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.Navigation("Account");
            });
#pragma warning restore 612, 618
        }
    }
}
